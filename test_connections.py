#!/usr/bin/env python3
"""
Arquivo para testar conex√µes com PostgreSQL (origem) e MySQL (destino)
Execute este arquivo antes do ETL principal para validar as conex√µes
"""

import psycopg2
import mysql.connector
import pandas as pd
from datetime import datetime
import sys

try:
    from config import POSTGRES_SOURCE_CONFIG, MYSQL_CONFIG
except ImportError as e:
    print(f"‚ùå Erro ao importar configura√ß√µes: {e}")
    print("üí° Execute este arquivo no diret√≥rio do projeto com .env configurado")
    sys.exit(1)

def test_postgres_source_connection():
    """Testa conex√£o com PostgreSQL origem"""
    print("=" * 60)
    print("TESTANDO CONEX√ÉO COM POSTGRESQL ORIGEM")
    print("=" * 60)
    
    try:
        print(f"üì° Tentando conectar em: {POSTGRES_SOURCE_CONFIG['host']}:{POSTGRES_SOURCE_CONFIG['port']}/{POSTGRES_SOURCE_CONFIG['database']}")
        print(f"üë§ Usu√°rio: {POSTGRES_SOURCE_CONFIG['user']}")
        
        # Conectar
        connection = psycopg2.connect(
            host=POSTGRES_SOURCE_CONFIG['host'],
            port=POSTGRES_SOURCE_CONFIG['port'],
            database=POSTGRES_SOURCE_CONFIG['database'],
            user=POSTGRES_SOURCE_CONFIG['user'],
            password=POSTGRES_SOURCE_CONFIG['password']
        )
        cursor = connection.cursor()
        
        # Teste b√°sico
        cursor.execute("SELECT NOW()")
        result = cursor.fetchone()
        print(f"‚úÖ Conex√£o PostgreSQL origem OK!")
        print(f"üïê Data/hora do servidor: {result[0]}")
        
        # Teste de schema
        cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
        table_count = cursor.fetchone()[0]
        print(f"üìä Tabelas dispon√≠veis no schema public: {table_count}")
        
        # Vers√£o PostgreSQL
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"üêò Vers√£o: {version.split(',')[0]}")
        
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na conex√£o PostgreSQL origem: {e}")
        return False

def test_mysql_connection():
    """Testa conex√£o com MySQL destino"""
    print("\n" + "=" * 60)
    print("TESTANDO CONEX√ÉO COM MYSQL DESTINO")
    print("=" * 60)
    
    try:
        print(f"üì° Tentando conectar em: {MYSQL_CONFIG['host']}:{MYSQL_CONFIG['port']}/{MYSQL_CONFIG['database']}")
        print(f"üë§ Usu√°rio: {MYSQL_CONFIG['user']}")
        
        # Conectar
        connection = mysql.connector.connect(
            host=MYSQL_CONFIG['host'],
            port=MYSQL_CONFIG['port'],
            database=MYSQL_CONFIG['database'],
            user=MYSQL_CONFIG['user'],
            password=MYSQL_CONFIG['password'],
            charset=MYSQL_CONFIG['charset']
        )
        cursor = connection.cursor()
        
        # Teste b√°sico
        cursor.execute("SELECT NOW()")
        result = cursor.fetchone()
        print(f"‚úÖ Conex√£o MySQL destino OK!")
        print(f"üïê Data/hora do servidor: {result[0]}")
        
        # Teste de schema
        cursor.execute(f"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '{MYSQL_CONFIG['database']}'")
        table_count = cursor.fetchone()[0]
        print(f"üìä Tabelas dispon√≠veis no database {MYSQL_CONFIG['database']}: {table_count}")
        
        # Vers√£o MySQL
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()[0]
        print(f"üê¨ Vers√£o: MySQL {version}")
        
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na conex√£o MySQL destino: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîç TESTE DE CONEX√ïES - ETL TESTE GEO")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("")
    
    # Testar conex√µes
    postgres_ok = test_postgres_source_connection()
    mysql_ok = test_mysql_connection()
    
    # Resultado final
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    
    if postgres_ok:
        print("‚úÖ PostgreSQL origem: OK")
    else:
        print("‚ùå PostgreSQL origem: FALHOU")
    
    if mysql_ok:
        print("‚úÖ MySQL destino: OK")
    else:
        print("‚ùå MySQL destino: FALHOU")
    
    if postgres_ok and mysql_ok:
        print("\nüéâ Todas as conex√µes est√£o funcionando!")
        print("üöÄ Voc√™ pode executar o ETL principal com: python main.py")
        return True
    else:
        print(f"\nüí• {2 - int(postgres_ok) - int(mysql_ok)} conex√£o(√µes) falharam!")
        print("üîß Verifique as configura√ß√µes no arquivo .env")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)